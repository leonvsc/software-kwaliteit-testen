name: Performance Test pipeline

# Controls when the workflow will run
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow on push or pull request events but only for the "Gab-pipeline-test-branche" branch
  push:
    branches: [ "Gab-pipeline-test-branche" ]
    
  pull_request:

jobs:
  # This workflow contains a single job called "performance-test-build"
  performance-test-build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v2

    # Setup Java for JMeter
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    # Generate TIMESTAMP
    - name: Generate Timestamp variable
      run: echo "TIMESTAMP=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

    # Setup .NET if needed
    #- name: Setup .NET
    #  uses: actions/setup-dotnet@v1
    #  with:
    #    dotnet-version: '6.0'
    
    # Installing Jmeter to run tests
    #- name: Install JMeter
    #  run: |
    #    wget -v https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.6.2.tgz
    #    tar -xzf apache-jmeter-5.6.2.tgz
    #    echo "${PWD}/apache-jmeter-5.6.2/bin" >> $GITHUB_PATH

    - name: Create Directories for JMeter Logs and Reports
      run: |
        mkdir .github/JMeterTestPlan/Results/Logs
        mkdir -p .github/JMeterTestPlan/Results/Reports/${{ env.TIMESTAMP }}_Report
    
    # For some reason the newly made directories are not empty
    - name: Clear JMeter Output Directories
      run: | 
        rm -rf .github/JMeterTestPlan/Results/*
        rm -rf .github/JMeterTestPlan/Results/Logs/*
        rm -rf .github/JMeterTestPlan/Results/Reports/${{ env.TIMESTAMP }}_Report/*

    # Installing Jmeter to run tests
    - name: Install JMeter
      run: |
        wget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.6.2.tgz
        if [ $? -eq 0 ]; then
            echo "Succesfully downloaded JMeter"
            tar -xzf apache-jmeter-5.6.2.tgz
            echo "${PWD}/apache-jmeter-5.6.2/bin" >> $GITHUB_PATH
        else
            echo "Failed to download JMeter"
            exit 1
        fi

    # Run JMeter Test
    - name: Run JMeter Test
      run: |
        jmeter -n -t ".github/JMeterTestPlan/Demo web shop Tricentis.jmx" \
        -l .github/JMeterTestPlan/Results/Logs/${{ env.TIMESTAMP }}_testresults.jtl \
        -e -o .github/JMeterTestPlan/Results/Reports/${{ env.TIMESTAMP }}_Report \
        -j .github/JMeterTestPlan/Results/Logs/${{ env.TIMESTAMP }}_jmeter.log
    
    #jmeter -n -t ".github/JMeterTestPlan/Demo web shop Tricentis.jmx" -l .github/JMeterTestPlan/Results/${{env.TIMESTAMP}}_testresults.jtl -e -o .github/JMeterTestPlan/Results -j .github/JMeterTestPlan/Results/${{env.TIMESTAMP}}_jmeter.log
    # Upload JMeter logs as an artifact
    #- name: Upload JMeter Logs
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: "${/{env.TIMESTAMP}/}/ jmeter.log"
    #    path: .github/JMeterTestPlan/Results/

    # Upload JMeter Test Results (.jtl file) as an artifact
    #- name: Upload JMeter Test Results
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: "$/{/{env.TIMESTAMP}/}/ testresults.jtl"
    #    path: .github/JMeterTestPlan/Results/

    # Upload JMeter logs as an artifact
    - name: Upload JMeter Logs
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.TIMESTAMP}}jmeter-logs
        path: .github/JMeterTestPlan/Results/Logs/${{ env.TIMESTAMP }}_jmeter.log


    - name: Upload JMeter Test Results
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.TIMESTAMP}}jmeter-results
        path: .github/JMeterTestPlan/Results/Reports/${{ env.TIMESTAMP }}_Report
      
