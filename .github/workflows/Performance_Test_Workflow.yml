name: Performance Test pipeline

# Injecting credentials safely for tests
env:
  JMETER_USERNAME: ${{ secrets.SOAP_USERNAME }}
  JMETER_PASSWORD: ${{ secrets.SOAP_PASSWORD }}
  SUCCESS_GIF: 'https://media.giphy.com/media/3o7WTL4qQCbbLLV2Pm/giphy.gif'
  FAILURE_GIF: 'https://i.gifer.com/P4Y.gif'

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  workflow_call:

jobs:
  # This workflow contains a single job called "performance-test-build"
  performance-test-build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    # Setup Java for JMeter
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '11'

# Generate TIMESTAMP
    - name: Generate Timestamp variable
      run: echo "TIMESTAMP=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

    # Makes directories that are needed for logs and reports
    - name: Create Directories for JMeter Logs and Reports
      run: |
        mkdir -p JMeterPerformanceTest/Results/Logs
        mkdir -p JMeterPerformanceTest/Results/Reports/${{ env.TIMESTAMP }}_Report

    # Update apt-get
    - name: Update apt-get
      run: | 
        sudo apt-get update
        if [ $? -eq 0 ]; then
              echo "Succesfully updated apt-get"
          else
              echo "Warning: Failed to update apt-get, apt-get might not have the newest versions available!"
        fi

    # Installing Jmeter to run tests
    - name: Install JMeter
      run: |
        wget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.6.2.tgz
        if [ $? -eq 0 ]; then
            echo "Succesfully downloaded JMeter"
            tar -xzf apache-jmeter-5.6.2.tgz
            echo "${PWD}/apache-jmeter-5.6.2/bin" >> $GITHUB_PATH
        else
            echo "Failed to download and/or install JMeter"
            exit 1
        fi

    # Install unzip
    - name: Install unzip
      run: | 
        sudo apt-get -y install unzip
        if [ $? -eq 0 ]; then
              echo "Succesfully installed unzip"
              unzip -v
          else
              echo "Cannot continue performance test workflow without unzip"
              exit 1
        fi


    # Install Groovy
    - name: Install Groovy
      run: |
        wget https://groovy.jfrog.io/artifactory/dist-release-local/groovy-zips/apache-groovy-binary-4.0.12.zip
        if [ $? -eq 0 ]; then
            echo "Succesfully downloaded groovy"
            sudo unzip apache-groovy-binary-4.0.12.zip -d apache-groovy-binary-4.0.12
            echo "${PWD}/apache-groovy-binary-4.0.12/groovy-4.0.12/bin" >> $GITHUB_PATH
            echo "This is the groovy version"
        else
            echo "Failed to download and/or install groovy"
            exit 1
        fi

    # Run JMeter Test
    # testing
    - name: Run JMeter Test
      run: |
        echo "${PWD}"
        jmeter -f -n -t "JMeterPerformanceTest/Demo web shop Tricentis.jmx" -JjtlFile=JMeterPerformanceTest/Results/Reports/${{ env.TIMESTAMP }}_Report/${{ env.TIMESTAMP }}_performance_testresults.jtl -Jusername=$JMETER_USERNAME -Jpassword=$JMETER_PASSWORD \
        -l JMeterPerformanceTest/Results/Reports/${{ env.TIMESTAMP }}_Report/${{ env.TIMESTAMP }}_performance_testresults.jtl \
        -e -o JMeterPerformanceTest/Results/Reports/${{ env.TIMESTAMP }}_Report \
        -j JMeterPerformanceTest/Results/Logs/${{ env.TIMESTAMP }}_jmeter_performance.log || (echo "JMeter test failed" && exit 1)

    # Run Groovy Script to Generate Summary Report
    - name: Generate Summary Report
      run: |
        groovy Scripts/performance-test-summary-script.groovy

    # Check the success or failure status of the test run even when another step might fail after the jmeter test
    - name: Set test result message
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "TEST_RESULT=JMeter test executed successfully!" >> $GITHUB_ENV
          echo "TEST_RESULT_SUBJECT=SUCCESSFUL:" >> $GITHUB_ENV
        else
          echo "TEST_RESULT=JMeter test could not be executed." >> $GITHUB_ENV
          echo "TEST_RESULT_SUBJECT=FAILED:" >> $GITHUB_ENV
        fi

    # Compress JMeter Results and Logs
    - name: Compress JMeter Results and Logs
      run: |
        zip -r jmeter_performance_reports_and_logs_zipped_${{ env.TIMESTAMP }}.zip JMeterPerformanceTest/Results/Reports/${{ env.TIMESTAMP }}_Report JMeterPerformanceTest/Results/Logs/${{ env.TIMESTAMP }}_jmeter_performance.log

    # Sends email
    - name: Send mail
      if: always()
      uses: dawidd6/action-send-mail@v3.9.0
      with:
        # Specify connection via URL (replaces server_address, server_port, secure,
        # username and password)
        #
        # Format:
        #
        #  * smtp://user:password@server:port
        #  * smtp+starttls://user:password@server:port
        # connection_url: ${{secrets.MAIL_CONNECTION}}
        # Required mail server address if not connection_url:
        server_address: smtp-mail.outlook.com
        # Server port, default 25:
        server_port: 587
        # Optional whether this connection use TLS (default is true if server_port is 465)
        secure: false
        # Optional (recommended) mail server username:
        username: ${{ secrets.MAIL_USERNAME }}
        # Optional (recommended) mail server password:
        password: ${{ secrets.MAIL_PASSWORD }}
        # Required mail subject:
        subject: ${{env.TEST_RESULT_SUBJECT}} Performance test ${{ env.TIMESTAMP }} Github Actions job result
        # Required recipients' addresses:
        to: gabriel94xd@gmail.com,
        # Required sender full name (address can be skipped):
        from: Test Bot <denise_bot@live.nl> # <user@example.com>
        # Optional plain body:
        #body: | 
        #  Build job on ${{ env.TIMESTAMP }} of ${{ github.repository }} ${{env.TEST_RESULT}}
        #  
        #  <div style="padding-top:56.250%;position:relative;"><iframe src="https://gifer.com/embed/P4Y" width="100%" height="100%" style='position:absolute;top:0;left:0;' frameBorder="0" allowFullScreen></iframe></div><p><a href="https://gifer.com">via GIFER</a></p>
        #
        #  For more information refer to the reports and logs of this run on github.
        # Optional HTML body read from file:
        # html_body: file://README.html
        # <iframe src="https://i.gifer.com/P4Y.gif" width="100%" height="100%" style='position:absolute;top:0;left:0;' frameBorder="0" allowFullScreen></iframe>
        # <img src="https://i.gifer.com/P4Y.gif" alt="GIF Description" style="width:100%;height:auto;position:absolute;top:0;left:0;">
        html_body: |
          <h2>Build job on ${{ env.TIMESTAMP }} of ${{ github.repository }} ${{env.TEST_RESULT}}</h2>
          
          <div style="padding-top:7.035%;position:relative;">
          <img src="${{ (env.TEST_RESULT_SUBJECT == 'FAILED:') && env.FAILURE_GIF || env.SUCCESS_GIF }}" alt="Test Result" style="width:100%;height:auto;position:absolute;top:0;left:0;">
          </div>

          For more information refer to the reports and logs of this run on github or in the attachment.
        # Optional carbon copy recipients:
        # cc: 
        # Optional blind carbon copy recipients:
        # bcc: 
        # Optional recipient of the email response:
        # reply_to:
        # Optional Message ID this message is replying to:
        # in_reply_to:
        # Optional unsigned/invalid certificates allowance:
        # ignore_cert: true
        # Optional converting Markdown to HTML (set content_type to text/html too):
        convert_markdown: true
        # Optional attachments:
        attachments: |
          JMeterPerformanceTest/Results/Logs/${{ env.TIMESTAMP }}_jmeter_performance.log,
          JMeterPerformanceTest/Results/Reports/${{ env.TIMESTAMP }}_Report/${{ env.TIMESTAMP }}_summary_performance_report.xml
        # Optional priority: 'high', 'normal' (default) or 'low'
        priority: low

    # Upload JMeter logs as an artifact
    - name: Upload JMeter Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.TIMESTAMP}}_jmeter-performance-logs
        path: JMeterPerformanceTest/Results/Logs/${{ env.TIMESTAMP }}_jmeter_performance.log
    
    # Upload JMeter logs and report zipped as an artifact
    - name: Upload JMeter zipped Logs and reports
      uses: actions/upload-artifact@v4
      with:
        name: jmeter_performance_reports_and_logs_zipped_${{ env.TIMESTAMP }}
        path: jmeter_performance_reports_and_logs_zipped_${{ env.TIMESTAMP }}.zip

    # Upload report folder as an artifact
    - name: Upload JMeter Test Results
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.TIMESTAMP}}_jmeter-performance-results
        path: JMeterPerformanceTest/Results/Reports/${{ env.TIMESTAMP }}_Report